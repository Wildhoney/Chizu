{/* {self.model.tasks.length === 0 && (
        <div className={styles.empty}>
          {self.validate.tasks.is(State.Pending) ? (
            <>Please wait&hellip;</>
          ) : (
            "You have no tasks yet."
          )}
        </div>
      )} */}

      {self.model.tasks.otherwise([]).map((task, index) => (
        <li key={String(task.id)} className={styles.row}>
          {/* <div
            // className={styles.details(
            //   task.is(State.Pending),
            // )}
          >
            <input
              id={String(task.id)}
              // disabled={
              //   !utils.pk(task.id) ||
              //   self.validate.tasks[index].completed.is(State.Pending)
              // }
              type="checkbox"
              checked={task.completed.otherwise(false)}
              // onChange={() =>
              //   task.id && self.actions.dispatch([Events.Completed, task.id])
              // }
            />

            <label htmlFor={String(task.id)} className={styles.task}>
              <div className={styles.details(task.completed.otherwise(false))}>
                {task.summary}
              </div>

              <div className={styles.date}>
                Added: {dayjs(task.date.toString()).format("DD/MM/YYYY")}
              </div>
            </label>
          </div> */}

          <button
            className={styles.button}
            // disabled={
            //   !utils.pk(task.id) ||
            //   self.validate.tasks[index].is(State.Removing)
            // }
            // onClick={() =>
            //   task.id && self.actions.dispatch([Events.Remove, task.id])
            // }
          >
            {/* {self.validate.tasks[index].is(State.Removing) ? (
              <LoaderPinwheel size={20} />
            ) : ( */}
              <Trash2 size={20} />
            {/* )} */}
          </button>
        </li>
      ))}